"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[300],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return f}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),p=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},l=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(r),h=n,f=u["".concat(s,".").concat(h)]||u[h]||m[h]||a;return r?o.createElement(f,c(c({ref:t},l),{},{components:r})):o.createElement(f,c({ref:t},l))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,c=new Array(a);c[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:n,c[1]=i;for(var p=2;p<a;p++)c[p]=r[p];return o.createElement.apply(null,c)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},7699:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return a},metadata:function(){return i},toc:function(){return p}});var o=r(3117),n=(r(7294),r(3905));const a={sidebar_position:3},c="Contracts",i={unversionedId:"technical-reference/contracts",id:"version-V2/technical-reference/contracts",title:"Contracts",description:"Semaphore includes three types of contracts:",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-V2/technical-reference/contracts.md",sourceDirName:"technical-reference",slug:"/technical-reference/contracts",permalink:"/es/docs/technical-reference/contracts",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V2/technical-reference/contracts.md",tags:[],version:"V2",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"version-V2/mySidebar",previous:{title:"Circuits",permalink:"/es/docs/technical-reference/circuits"},next:{title:"Deployed contracts",permalink:"/es/docs/deployed-contracts"}},s={},p=[{value:"Base contracts",id:"base-contracts",level:2},{value:"Extension contracts",id:"extension-contracts",level:2},{value:"Verifiers",id:"verifiers",level:2}],l={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"contracts"},"Contracts"),(0,n.kt)("p",null,"Semaphore includes three types of contracts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/technical-reference/contracts#base-contracts"},(0,n.kt)("strong",{parentName:"a"},"Base contracts"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/technical-reference/contracts#extension-contracts"},(0,n.kt)("strong",{parentName:"a"},"Extension contracts"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/technical-reference/contracts#verifiers"},(0,n.kt)("strong",{parentName:"a"},"Verifiers")))),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"To use Semaphore contracts and interfaces in your project,\ninstall the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts"},(0,n.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/contracts"))," NPM package.")),(0,n.kt)("h2",{id:"base-contracts"},"Base contracts"),(0,n.kt)("p",null,"Semaphore provides the following base contracts:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts/base/SemaphoreCore.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreCore.sol")),": contains the functions to verify Semaphore proofs;"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts/base/SemaphoreGroups.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreGroups.sol")),": contains the functions to create groups and add/remove members.")),(0,n.kt)("p",null,"These contracts are closely related to the protocol.\nYou can inherit them in your contract or you can use ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts/Semaphore.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"Semaphore.sol")),", which inherits them for you.\nSee our ",(0,n.kt)("a",{parentName:"p",href:"/docs/deployed-contracts#semaphore"},"deployed contracts")," to find the addresses for your network."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"While some dApps may use on-chain groups, others may prefer to use off-chain groups, saving only their tree roots in the contract.")),(0,n.kt)("h2",{id:"extension-contracts"},"Extension contracts"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts/extensions/SemaphoreVoting.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreVoting.sol")),": voting contract that contains the essential functions to create polls, add voters, and anonymously cast votes."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts/extensions/SemaphoreWhistleblowing.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreWhistleblowing.sol")),": whistleblowing contract that contains the essential functions to create entities (for example: non-profit organizations), add whistleblowers, and anonymously publish leaks.")),(0,n.kt)("p",null,"These contracts extend the protocol to provide application logic for specific use-cases.\nMore extensions will be added in the future."),(0,n.kt)("h2",{id:"verifiers"},"Verifiers"),(0,n.kt)("p",null,"To verify Semaphore proofs, the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts/base/SemaphoreCore.sol"},(0,n.kt)("inlineCode",{parentName:"a"},"SemaphoreCore.sol"))," contract requires the address of a deployed verifier contract.\nYou can choose to manually deploy the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts/verifiers"},"verifier")," you prefer or you can use one of our ",(0,n.kt)("a",{parentName:"p",href:"/docs/deployed-contracts#verifiers"},"deployed verifiers"),"."),(0,n.kt)("p",null,"Each verifier name indicates the tree depth that it can verify.\nFor example, given a Semaphore proof generated with a tree depth ",(0,n.kt)("inlineCode",{parentName:"p"},"20"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"Verifier20.sol")," contract can verify the proof."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("a",{parentName:"li",href:"/docs/guides/groups"},"group")," used for the proof can have a maximum ",(0,n.kt)("inlineCode",{parentName:"li"},"2^20=1048576")," members.")))}u.isMDXComponent=!0}}]);