"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[632],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8612:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var a=n(3117),r=(n(7294),n(3905));const i={sidebar_position:4},o="Usage",s={unversionedId:"usage",id:"version-V1/usage",title:"Usage",description:"The Semaphore contract forms a base layer for other contracts to create",source:"@site/versioned_docs/version-V1/usage.md",sourceDirName:".",slug:"/usage",permalink:"/docs/V1/usage",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V1/usage.md",tags:[],version:"V1",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"version-V1/mySidebar",previous:{title:"Quick start",permalink:"/docs/V1/quickstart"},next:{title:"Contract API",permalink:"/docs/V1/contract-api"}},l={},c=[{value:"Add, deactivate, or reactivate external nullifiiers",id:"add-deactivate-or-reactivate-external-nullifiiers",level:2},{value:"Set broadcast permissioning",id:"set-broadcast-permissioning",level:2},{value:"Insert identities",id:"insert-identities",level:2},{value:"Broadcast signals",id:"broadcast-signals",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The Semaphore contract forms a base layer for other contracts to create\napplications that rely on anonymous signaling."),(0,r.kt)("p",null,"First, you should ensure that the proving key, verification key, and circuit\nfile, which are static, be easily available to your users. These may be hosted\nin a CDN or bundled with your application code."),(0,r.kt)("p",null,"The Semaphore team has not performed a trusted setup yet, so trustworthy\nversions of these files are not available yet."),(0,r.kt)("p",null,"Untrusted versions of these files, however, may be obtained via the\n",(0,r.kt)("inlineCode",{parentName:"p"},"circuits/scripts/download_snarks.sh")," script."),(0,r.kt)("p",null,"Next, to have full flexibility over Semaphore's mechanisms, write a Client\ncontract and set the owner of the Semaphore contract as the address of the\nClient contract. You may also write a Client contract which deploys a Semaphore\ncontract in its constructor, or on the fly."),(0,r.kt)("p",null,"With the Client contract as the owner of the Semaphore contract, the Client\ncontract may call owner-only Semaphore functions such as\n",(0,r.kt)("inlineCode",{parentName:"p"},"addExternalNullifier()"),"."),(0,r.kt)("h2",{id:"add-deactivate-or-reactivate-external-nullifiiers"},"Add, deactivate, or reactivate external nullifiiers"),(0,r.kt)("p",null,"These functions add, deactivate, and reactivate an external nullifier respectively.\nAs each identity can only signal once to an external nullifier, and as a signal\ncan only be successfully broadcasted to an active external nullifier, these\nfunctions enable use cases where it is necessary to have multiple external\nnullifiers or to activate and/or deactivate them."),(0,r.kt)("p",null,"Refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://medium.com/coinmonks/to-mixers-and-beyond-presenting-semaphore-a-privacy-gadget-built-on-ethereum-4c8b00857c9b"},"high-level explanation of\nSemaphore"),"\nfor more details."),(0,r.kt)("h2",{id:"set-broadcast-permissioning"},"Set broadcast permissioning"),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"Semaphore.broadcastSignal()")," is permissioned by default, so if you\nwish for anyone to be able to broadcast a signal, the owner of the Semaphore\ncontract (either a Client contract or externally owned account) must first\ninvoke ",(0,r.kt)("inlineCode",{parentName:"p"},"setPermissioning(false)"),"."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/appliedzkp/semaphore/blob/master/contracts/sol/SemaphoreClient.sol"},"SemaphoreClient.sol")," for an example."),(0,r.kt)("h2",{id:"insert-identities"},"Insert identities"),(0,r.kt)("p",null,"To generate an identity commitment, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"libsemaphore")," functions\n",(0,r.kt)("inlineCode",{parentName:"p"},"genIdentity()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"genIdentityCommitment()")," Typescript (or Javascript)\nfunctions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const identity: Identity = genIdentity()\nconst identityCommitment = genIdentityCommitment(identity)\n")),(0,r.kt)("p",null,"Be sure to store ",(0,r.kt)("inlineCode",{parentName:"p"},"identity")," somewhere safe. The ",(0,r.kt)("inlineCode",{parentName:"p"},"serialiseIdentity()")," function\ncan help with this:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"const serialisedId: string = serialiseIdentity(identity: Identity)")),(0,r.kt)("p",null,"It converts an ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity")," into a JSON string which looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'["e82cc2b8654705e427df423c6300307a873a2e637028fab3163cf95b18bb172e","a02e517dfb3a4184adaa951d02bfe0fe092d1ee34438721d798db75b8db083","15c6540bf7bddb0616984fccda7e954a0fb5ea4679ac686509dc4bd7ba9c3b"]\n')),(0,r.kt)("p",null,"To convert this string back into an ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"unSerialiseIdentity()"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"const id: Identity = unSerialiseIdentity(serialisedId)")),(0,r.kt)("h2",{id:"broadcast-signals"},"Broadcast signals"),(0,r.kt)("p",null,"First obtain the leaves of the identity tree (in sequence, up to the user's\nidentity commitment, or more)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const leaves = <list of leaves>\n")),(0,r.kt)("p",null,"Next, load the circuit from disk (or from a remote source):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const circuitPath = path.join(__dirname, "/path/to/circuit.json")\nconst cirDef = JSON.parse(fs.readFileSync(circuitPath).toString())\nconst circuit = genCircuit(cirDef)\n')),(0,r.kt)("p",null,"Next, use ",(0,r.kt)("inlineCode",{parentName:"p"},"libsemaphore"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"genWitness()")," helper function as such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"const result = await genWitness(\n    signal,\n    circuit,\n    identity,\n    leaves,\n    num_levels,\n    external_nullifier,\n)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"signal"),": a string which is the signal to broadcast."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"circuit"),": the output of ",(0,r.kt)("inlineCode",{parentName:"li"},"genCircuit()")," (see above)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"identity"),": the user's identity as an ",(0,r.kt)("inlineCode",{parentName:"li"},"Identity")," object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"leaves")," the list of leaves in the tree (see above)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num_levels"),": the depth of the Merkle tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"external_nullifier"),": the external nullifier at which to broadcast.")),(0,r.kt)("p",null,"Load the proving key from disk (or from a remote source):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const provingKeyPath = path.join(__dirname, "/path/to/proving_key.bin")\nconst provingKey: SnarkProvingKey = fs.readFileSync(provingKeyPath)\n')),(0,r.kt)("p",null,"Generate the proof (this takes about 30-45 seconds on a modern laptop):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const proof = await genProof(result.witness, provingKey)\n")),(0,r.kt)("p",null,"Generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"broadcastSignal()")," parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const publicSignals = genPublicSignals(result.witness, circuit)\nconst params = genBroadcastSignalParams(result, proof, publicSignals)\n")),(0,r.kt)("p",null,"Finally, invoke ",(0,r.kt)("inlineCode",{parentName:"p"},"broadcastSignal()")," with the parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const tx = await semaphoreClientContract.broadcastSignal(\n    ethers.utils.toUtf8Bytes(signal),\n    params.proof,\n    params.root,\n    params.nullifiersHash,\n    external_nullifier,\n    { gasLimit: 500000 }\n)\n")))}u.isMDXComponent=!0}}]);