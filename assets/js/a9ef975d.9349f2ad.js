"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[610],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=i.createContext({}),l=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(d.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),c=r,h=u["".concat(d,".").concat(c)]||u[c]||m[c]||a;return n?i.createElement(h,o(o({ref:t},p),{},{components:n})):i.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2648:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l}});var i=n(3117),r=(n(7294),n(3905));const a={sidebar_position:1,title:"Identities"},o="Semaphore identities",s={unversionedId:"guides/identities",id:"version-V2/guides/identities",title:"Identities",description:"In order to join a Semaphore group, a user must first create a Semaphore identity.",source:"@site/versioned_docs/version-V2/guides/identities.md",sourceDirName:"guides",slug:"/guides/identities",permalink:"/docs/guides/identities",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V2/guides/identities.md",tags:[],version:"V2",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Identities"},sidebar:"version-V2/mySidebar",previous:{title:"What Is Semaphore?",permalink:"/docs/introduction"},next:{title:"Groups",permalink:"/docs/guides/groups"}},d={},l=[{value:"Create identities",id:"create-identities",level:2},{value:"Create random identities",id:"create-random-identities",level:3},{value:"Create deterministic identities",id:"create-deterministic-identities",level:3},{value:"Save your identities",id:"save-your-identities",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"semaphore-identities"},"Semaphore identities"),(0,r.kt)("p",null,"In order to join a ",(0,r.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-group"},"Semaphore group"),", a user must first create a ",(0,r.kt)("a",{parentName:"p",href:"/docs/glossary#semaphore-identity"},"Semaphore identity"),".\nA Semaphore identity contains two values generated with the identity:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Identity trapdoor"),(0,r.kt)("li",{parentName:"ul"},"identity nullifier")),(0,r.kt)("p",null,"To use and verify the identity, the identity owner (user) must know the trapdoor and nullifier values.\nTo prevent fraud, the owner should keep both values secret."),(0,r.kt)("h2",{id:"create-identities"},"Create identities"),(0,r.kt)("p",null,"In your code, use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/identity"},(0,r.kt)("inlineCode",{parentName:"a"},"@semaphore-protocol/identity"))," library to create a Semaphore identity ",(0,r.kt)("em",{parentName:"p"},"deterministically")," (from the hash of a message) or ",(0,r.kt)("em",{parentName:"p"},"randomly"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-random-identities"},(0,r.kt)("strong",{parentName:"a"},"Create random identities"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-deterministic-identities"},(0,r.kt)("strong",{parentName:"a"},"Create deterministic identities")))),(0,r.kt)("h3",{id:"create-random-identities"},"Create random identities"),(0,r.kt)("p",null,"To create a random identity, instantiate ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity")," without any parameters--for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Identity } from "@semaphore-protocol/identity"\n\nconst { trapdoor, nullifier, commitment } = new Identity()\n')),(0,r.kt)("p",null,"The new identity contains two random secret values: ",(0,r.kt)("inlineCode",{parentName:"p"},"trapdoor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nullifier"),", and one public value: ",(0,r.kt)("inlineCode",{parentName:"p"},"commitment"),"."),(0,r.kt)("p",null,"The Poseidon hash of the identity nullifier and trapdoor is called the ",(0,r.kt)("em",{parentName:"p"},"identity secret"),",\nand its hash is the ",(0,r.kt)("em",{parentName:"p"},"identity commitment"),"."),(0,r.kt)("p",null,"An identity commitment, similarly to Ethereum addresses, is a public value used\nin Semaphore groups to represent the identity of a group member. The secret values are similar to\nEthereum private keys and are used to generate Semaphore zero-knowledge proofs and authenticate signals."),(0,r.kt)("h3",{id:"create-deterministic-identities"},"Create deterministic identities"),(0,r.kt)("p",null,"If you pass a message as a parameter, Semaphore generates ",(0,r.kt)("inlineCode",{parentName:"p"},"trapdoor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nullifier"),"\nfrom the ",(0,r.kt)("em",{parentName:"p"},"SHA256")," hash of the message.\nThe message might be a password or a message that the user cryptographically signs with a private key."),(0,r.kt)("p",null,"When using deterministic identities, you should always keep the message secret.\nGiven that the hash is deterministic, anyone with the same message can recreate the same identity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const identity = new Identity("secret-message")\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Building a system to save or recover secret values of Semaphore identities is nontrivial.\nYou may choose to delegate such functionality to existing wallets such as Metamask--for example:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"In Metamask, a user signs a message with the private key of their Ethereum account."),(0,r.kt)("li",{parentName:"ol"},"In your application, the user creates a deterministic identity with the signed message."),(0,r.kt)("li",{parentName:"ol"},"The user can now recreate their Semaphore identity whenever they want by signing the same message with their Ethereum account in Metamask."))),(0,r.kt)("h2",{id:"save-your-identities"},"Save your identities"),(0,r.kt)("p",null,"You can output an identity as a JSON string that you can save and reuse later.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity.toString()")," method generates a JSON array from an identity--for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'console.log(identity.toString()) // View the identity trapdoor and nullifier.\n\n// \'["8255d...", "62c41..."]\'\n')),(0,r.kt)("p",null,"The array contains the trapdoor and nullifier."),(0,r.kt)("p",null,"To reuse the saved identity, pass the JSON to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Identity()")," constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const identity2 = new Identity(identity.toString())\n")))}u.isMDXComponent=!0}}]);