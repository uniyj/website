"use strict";(self.webpackChunk_semaphore_protocol_website=self.webpackChunk_semaphore_protocol_website||[]).push([[209],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return k}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},s="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=u(r),d=i,k=s["".concat(p,".").concat(d)]||s[d]||c[d]||a;return r?n.createElement(k,o(o({ref:t},m),{},{components:r})):n.createElement(k,o({ref:t},m))}));function k(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6840:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return s},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var n=r(3117),i=(r(7294),r(3905));const a={sidebar_position:6},o="Subgraph",l={unversionedId:"subgraph",id:"version-V2/subgraph",title:"Subgraph",description:"The Graph is a protocol for indexing networks like Ethereum and IPFS.",source:"@site/versioned_docs/version-V2/subgraph.md",sourceDirName:".",slug:"/subgraph",permalink:"/docs/subgraph",draft:!1,editUrl:"https://github.com/semaphore-protocol/website/edit/main/versioned_docs/version-V2/subgraph.md",tags:[],version:"V2",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"version-V2/mySidebar",previous:{title:"Deployed contracts",permalink:"/docs/deployed-contracts"},next:{title:"Glossary",permalink:"/docs/glossary"}},p={},u=[{value:"Schema",id:"schema",level:2},{value:"MerkleTree",id:"merkletree",level:3},{value:"Group",id:"group",level:3},{value:"Member",id:"member",level:3},{value:"VerifiedProof",id:"verifiedproof",level:3}],m={toc:u};function s(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"subgraph"},"Subgraph"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://thegraph.com/"},"The Graph")," is a protocol for indexing networks like Ethereum and IPFS.\nSite owners publish ",(0,i.kt)("em",{parentName:"p"},"subgraphs")," that expose site data for anyone to query.\nSemaphore's subgraph allows you to retrieve data from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/semaphore/tree/v2.6.1/packages/contracts/Semaphore.sol"},(0,i.kt)("inlineCode",{parentName:"a"},"Semaphore.sol"))," smart contract."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The Graph protocol uses the ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/"},"GraphQL")," query lanaguage. For examples, see the ",(0,i.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/developer/graphql-api"},"GraphQL API documentation"),". Visit the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/semaphore-protocol/subgraph"},"subgraph repository")," to see the list of Semaphore subgraphs.")),(0,i.kt)("h2",{id:"schema"},"Schema"),(0,i.kt)("h3",{id:"merkletree"},"MerkleTree"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": unique identifier among all MerkleTree entities,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"depth"),": Merkle tree depth,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"root"),": Merkle tree root,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeroValue"),": Merkle tree zero value,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numberOfLeaves"),": total number of tree leaves,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group"),": link to the Group entity.")),(0,i.kt)("h3",{id:"group"},"Group"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": unique identifier among all Group entities,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"merkleTree"),": link to the MerkleTree entity,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timestamp"),": block timestamp,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"admin"),": admin of the group,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"members"),": list of group members."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"verifiedProofs"),": list of group proofs.")),(0,i.kt)("h3",{id:"member"},"Member"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": unique identifier among all Member entities,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"identityCommitment"),": Semaphore identity commitment,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timestamp"),": block timestamp,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index"),": index of the tree leaf,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group"),": link to the Group entity.")),(0,i.kt)("h3",{id:"verifiedproof"},"VerifiedProof"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": unique identifier among all VerifiedProof entities,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signal"),": user's signal,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"merkleTreeRoot"),": Merkle tree root,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nullifierHash"),": nullifier hash,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"externalNullifier"),": external nullifier,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timestamp"),": block timestamp,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group"),": link to the Group entity.")))}s.isMDXComponent=!0}}]);